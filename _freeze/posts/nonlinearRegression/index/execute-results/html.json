{
  "hash": "94fb92bece23e80c336591a3d5e5204f",
  "result": {
    "markdown": "---\ntitle: \"Nonlinear Regression\"\nauthor: \"Rahul Pulluri\"\ndate: \"2023-10-28\"\nimage: \"sphx_glr_plot_curve_fitting_001.png\"\n---\n\n![](sphx_glr_plot_curve_fitting_001.png)\n\n## Definition\n\nNon-linear regression in machine learning is a powerful tool for modeling complex relationships between variables, where these relationships cannot be adequately described using a straight line. In machine learning, non-linear regression is used to predict outcomes based on non-linear interactions of predictor variables. It's particularly useful in scenarios where the underlying data patterns are inherently non-linear.\n\n## Mathematical Formulation\n\nThe general form of a non-linear regression model is: Y = f(X, β) + ε\n\n- Y is the dependent variable.\n\n- X is the independent variable.\n\n- β represents the parameters of the model.\n\n- f is a non-linear function.\n\n- ε is the error term.\n\n\n## Characteristics\n\n**Nature of Relationship:** Unlike linear regression, where the relationship between variables is a straight line, non-linear regression deals with data where the relationship is curvilinear. This means the graph of the relationship forms a curve, not a straight line.\n\n**Types of Non-Linear Relationships:** Relationships can be exponential, logarithmic, power, or more complex types.\nFor instance, a common non-linear model is the exponential growth model, represented as:\n\n- Y = a * e^(bX)\n\n- Here, e is the base of the natural logarithm, a and b are model parameters, Y is the dependent variable, and X is the independent variable. \n\n**Flexibility:** Non-linear regression can model more complex relationships and patterns in data compared to linear models. It’s more flexible in fitting data curves, but this comes with the cost of increased complexity in calculation and interpretation.\n\n## Types of Non-linear Models:\n\n**Polynomial Regression:** Extends linear models by adding polynomial terms, making the model curve.\n\n**Decision Trees and Random Forests:** Can model non-linear relationships by splitting the data into branches based on decision rules.\n\n**Neural Networks:** Highly capable of capturing non-linear relationships through layers of neurons with non-linear activation functions.\n\n**Support Vector Machines with Non-linear Kernels:** Use kernel functions (like RBF) to project data into higher dimensions where it is linearly separable.\n\n## Applications\n\n**Scientific Data:** Often used in scientific data where the rate of change of a variable accelerates or decelerates rapidly, or where the effect of an independent variable is not proportional over its range.\n\n**Growth Curves:** Common in biological systems, such as modeling population growth or the spread of diseases.\n\n**Economic Data:** Used in economics for functions like utility curves, supply/demand curves.\n\n## Examples of Nonlinear Regression\n\n**I.Introduction**\n\nWhen you're looking at data that seems to form curves or non-straight patterns, using linear regression might not give you the most accurate results. Linear regression is like a tool designed for straight-line relationships, so when your data behaves in a curvy way, it doesn't quite fit the tool's assumptions. That's where non-linear regression steps in. It's like having a set of tools that can handle curves and bends in the data. These tools, like polynomial, exponential, or logarithmic regression, can adjust to the data's curves and complexities, giving you more precise predictions and a better match to the real nature of the data.\n\n## 1. Linear\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the linear function (e.g., L(x) = ax + b)\na, b = 2, 1\n\n# Generate x values\nx = np.linspace(0, 5, 100)\n\n# Calculate the corresponding y values using the linear function\ny = a * x + b\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.5, len(x))\ndata_y = y + noise\n\n# Plot the linear function and data points\nplt.plot(x, y, label='Linear Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('L(x)')\nplt.title('Linear Function')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=585 height=449}\n:::\n:::\n\n\n## 2. Polynomial\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define coefficients of the polynomial equation (e.g., P(x) = ax^3 + bx^2 + cx + d)\na, b, c, d = 1, -3, 3, -1\n\n# Generate x values\nx = np.linspace(-2, 2, 100)\n\n# Calculate the corresponding y values using the polynomial equation\ny = a * x**3 + b * x**2 + c * x + d\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.2, len(x))\ndata_y = y + noise\n\n# Plot the polynomial function and data points\nplt.plot(x, y, label='Polynomial Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('P(x)')\nplt.title('Polynomial Function')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=596 height=449}\n:::\n:::\n\n\n## 3. Quadratic\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define coefficients of the quadratic equation (e.g., Q(x) = ax^2 + bx + c)\na, b, c = 1, -2, 1\n\n# Generate x values\nx = np.linspace(-2, 3, 100)\n\n# Calculate the corresponding y values using the quadratic equation\ny = a * x**2 + b * x + c\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.2, len(x))\ndata_y = y + noise\n\n# Plot the quadratic function and data points\nplt.plot(x, y, label='Quadratic Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('Q(x)')\nplt.title('Quadratic Function')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=576 height=449}\n:::\n:::\n\n\n## 4. Exponential\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the exponential function (e.g., E(x) = a * e^(bx))\na, b = 1, 0.5\n\n# Generate x values\nx = np.linspace(0, 5, 100)\n\n# Calculate the corresponding y values using the exponential function\ny = a * np.exp(b * x)\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.2, len(x))\ndata_y = y + noise\n\n# Plot the exponential function and data points\nplt.plot(x, y, label='Exponential Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('E(x)')\nplt.title('Exponential Function')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=585 height=449}\n:::\n:::\n\n\n## 5. Logarithmic\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the logarithmic function (e.g., L(x) = a * ln(bx))\na, b = 1, 2\n\n# Generate x values\nx = np.linspace(0.1, 5, 100)\n\n# Calculate the corresponding y values using the logarithmic function\ny = a * np.log(b * x)\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.2, len(x))\ndata_y = y + noise\n\n# Plot the logarithmic function and data points\nplt.plot(x, y, label='Logarithmic Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('L(x)')\nplt.title('Logarithmic Function')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=587 height=449}\n:::\n:::\n\n\n## 6. Sigmoidal/Logistic\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the sigmoidal/logistic function (e.g., S(x) = 1 / (1 + e^(-x)))\nx = np.linspace(-5, 5, 100)\n\n# Calculate the corresponding y values using the sigmoidal/logistic function\ny = 1 / (1 + np.exp(-x))\n\n# Generate random data points with noise\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.05, len(x))\ndata_y = y + noise\n\n# Plot the sigmoidal/logistic function and data points\nplt.plot(x, y, label='Sigmoidal/Logistic Function', color='blue')\nplt.scatter(x, data_y, label='Data Points', color='red', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('S(x)')\nplt.title('Sigmoidal/Logistic')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=589 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}